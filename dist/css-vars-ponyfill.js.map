{"version":3,"file":"css-vars-ponyfill.js","sources":["../node_modules/get-css-data/dist/get-css-data.esm.js","../node_modules/balanced-match/index.js","../src/parse-css.js","../src/stringify-css.js","../src/walk-css.js","../src/transform-css.js","../src/index.js"],"sourcesContent":["/*!\n * get-css-data\n * v1.6.3\n * https://github.com/jhildenbiddle/get-css-data\n * (c) 2018-2019 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction getUrls(urls) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var settings = {\n        mimeType: options.mimeType || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var urlArray = Array.isArray(urls) ? urls : [ urls ];\n    var urlQueue = Array.apply(null, Array(urlArray.length)).map(function(x) {\n        return null;\n    });\n    function isValidCss() {\n        var cssText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n        var isHTML = cssText.trim().charAt(0) === \"<\";\n        return !isHTML;\n    }\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n    function onSuccess(responseText, urlIndex) {\n        var returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n        responseText = returnVal === false ? \"\" : returnVal || responseText;\n        urlQueue[urlIndex] = responseText;\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n    var parser = document.createElement(\"a\");\n    urlArray.forEach(function(url, i) {\n        parser.setAttribute(\"href\", url);\n        parser.href = String(parser.href);\n        var isIElte9 = Boolean(document.all && !window.atob);\n        var isIElte9CORS = isIElte9 && parser.host.split(\":\")[0] !== location.host.split(\":\")[0];\n        if (isIElte9CORS) {\n            var isSameProtocol = parser.protocol === location.protocol;\n            if (isSameProtocol) {\n                var xdr = new XDomainRequest();\n                xdr.open(\"GET\", url);\n                xdr.timeout = 0;\n                xdr.onprogress = Function.prototype;\n                xdr.ontimeout = Function.prototype;\n                xdr.onload = function() {\n                    if (isValidCss(xdr.responseText)) {\n                        onSuccess(xdr.responseText, i);\n                    } else {\n                        onError(xdr, i);\n                    }\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n                setTimeout(function() {\n                    xdr.send();\n                }, 0);\n            } else {\n                console.warn(\"Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol (\".concat(url, \")\"));\n                onError(null, i);\n            }\n        } else {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url);\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n            settings.onBeforeSend(xhr, url, i);\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200 && isValidCss(xhr.responseText)) {\n                        onSuccess(xhr.responseText, i);\n                    } else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n            xhr.send();\n        }\n    });\n}\n\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object}   [options] The options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include] CSS selector matching <link> and <style>\n *                   nodes to include\n * @param {string}   [options.exclude] CSS selector matching <link> and <style>\n *                   nodes to exclude\n * @param {object}   [options.filter] Regular expression used to filter node CSS\n *                   data. Each block of CSS data is tested against the filter,\n *                   and only matching data is included.\n * @param {object}   [options.useCSSOM=false] Determines if CSS data will be\n *                   collected from a stylesheet's runtime values instead of its\n *                   text content. This is required to get accurate CSS data\n *                   when a stylesheet has been modified using the deleteRule()\n *                   or insertRule() methods because these modifications will\n *                   not be reflected in the stylesheet's text content.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback on each CSS node read. Passes\n *                   1) CSS text, 2) source node reference, and 3) the source\n *                   URL as arguments.\n * @param {function} [options.onError] Callback on each error. Passes 1) the XHR\n *                   object for inspection, 2) soure node reference, and 3) the\n *                   source URL that failed (either a <link> href or an @import)\n *                   as arguments\n * @param {function} [options.onComplete] Callback after all nodes have been\n *                   processed. Passes 1) concatenated CSS text, 2) an array of\n *                   CSS text in DOM order, and 3) an array of nodes in DOM\n *                   order as arguments.\n *\n * @example\n *\n *   getCssData({\n *     rootElement: document,\n *     include    : 'style,link[rel=\"stylesheet\"]',\n *     exclude    : '[href=\"skip.css\"]',\n *     filter     : /red/,\n *     useCSSOM   : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onComplete(cssText, cssArray, nodeArray) {\n *       // ...\n *     }\n *   });\n */ function getCssData(options) {\n    var regex = {\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        cssImports: /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    var settings = {\n        rootElement: options.rootElement || document,\n        include: options.include || 'style,link[rel=\"stylesheet\"]',\n        exclude: options.exclude || null,\n        filter: options.filter || null,\n        useCSSOM: options.useCSSOM || false,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter(function(node) {\n        return !matchesSelector(node, settings.exclude);\n    });\n    var cssArray = Array.apply(null, Array(sourceNodes.length)).map(function(x) {\n        return null;\n    });\n    function handleComplete() {\n        var isComplete = cssArray.indexOf(null) === -1;\n        if (isComplete) {\n            var cssText = cssArray.join(\"\");\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n    function handleSuccess(cssText, cssIndex, node, sourceUrl) {\n        var returnVal = settings.onSuccess(cssText, node, sourceUrl);\n        cssText = returnVal !== undefined && Boolean(returnVal) === false ? \"\" : returnVal || cssText;\n        resolveImports(cssText, node, sourceUrl, function(resolvedCssText, errorData) {\n            if (cssArray[cssIndex] === null) {\n                errorData.forEach(function(data) {\n                    return settings.onError(data.xhr, node, data.url);\n                });\n                if (!settings.filter || settings.filter.test(resolvedCssText)) {\n                    cssArray[cssIndex] = resolvedCssText;\n                } else {\n                    cssArray[cssIndex] = \"\";\n                }\n                handleComplete();\n            }\n        });\n    }\n    function parseImportData(cssText, baseUrl) {\n        var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var importData = {};\n        importData.rules = (cssText.replace(regex.cssComments, \"\").match(regex.cssImports) || []).filter(function(rule) {\n            return ignoreRules.indexOf(rule) === -1;\n        });\n        importData.urls = importData.rules.map(function(rule) {\n            return rule.replace(regex.cssImports, \"$1\");\n        });\n        importData.absoluteUrls = importData.urls.map(function(url) {\n            return getFullUrl(url, baseUrl);\n        });\n        importData.absoluteRules = importData.rules.map(function(rule, i) {\n            var oldUrl = importData.urls[i];\n            var newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);\n            return rule.replace(oldUrl, newUrl);\n        });\n        return importData;\n    }\n    function resolveImports(cssText, node, baseUrl, callbackFn) {\n        var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n        var importData = parseImportData(cssText, baseUrl, __errorRules);\n        if (importData.rules.length) {\n            getUrls(importData.absoluteUrls, {\n                onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                    settings.onBeforeSend(xhr, node, url);\n                },\n                onSuccess: function onSuccess(cssText, url, urlIndex) {\n                    var returnVal = settings.onSuccess(cssText, node, url);\n                    cssText = returnVal === false ? \"\" : returnVal || cssText;\n                    var responseImportData = parseImportData(cssText, url, __errorRules);\n                    responseImportData.rules.forEach(function(rule, i) {\n                        cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);\n                    });\n                    return cssText;\n                },\n                onError: function onError(xhr, url, urlIndex) {\n                    __errorData.push({\n                        xhr: xhr,\n                        url: url\n                    });\n                    __errorRules.push(importData.rules[urlIndex]);\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                },\n                onComplete: function onComplete(responseArray) {\n                    responseArray.forEach(function(importText, i) {\n                        cssText = cssText.replace(importData.rules[i], importText);\n                    });\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                }\n            });\n        } else {\n            callbackFn(cssText, __errorData);\n        }\n    }\n    if (sourceNodes.length) {\n        sourceNodes.forEach(function(node, i) {\n            var linkHref = node.getAttribute(\"href\");\n            var linkRel = node.getAttribute(\"rel\");\n            var isLink = node.nodeName === \"LINK\" && linkHref && linkRel && linkRel.toLowerCase() === \"stylesheet\";\n            var isStyle = node.nodeName === \"STYLE\";\n            if (isLink) {\n                getUrls(linkHref, {\n                    mimeType: \"text/css\",\n                    onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                        settings.onBeforeSend(xhr, node, url);\n                    },\n                    onSuccess: function onSuccess(cssText, url, urlIndex) {\n                        var sourceUrl = getFullUrl(linkHref, location.href);\n                        handleSuccess(cssText, i, node, sourceUrl);\n                    },\n                    onError: function onError(xhr, url, urlIndex) {\n                        cssArray[i] = \"\";\n                        settings.onError(xhr, node, url);\n                        handleComplete();\n                    }\n                });\n            } else if (isStyle) {\n                var cssText = node.textContent;\n                if (settings.useCSSOM) {\n                    cssText = Array.apply(null, node.sheet.cssRules).map(function(rule) {\n                        return rule.cssText;\n                    }).join(\"\");\n                }\n                handleSuccess(cssText, i, node, location.href);\n            } else {\n                cssArray[i] = \"\";\n                handleComplete();\n            }\n        });\n    } else {\n        settings.onComplete(\"\", []);\n    }\n}\n\nfunction getFullUrl(url) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;\n    var d = document.implementation.createHTMLDocument(\"\");\n    var b = d.createElement(\"base\");\n    var a = d.createElement(\"a\");\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n    return a.href;\n}\n\nfunction matchesSelector(elm, selector) {\n    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    return matches.call(elm, selector);\n}\n\nexport default getCssData;\n//# sourceMappingURL=get-css-data.esm.js.map\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced from 'balanced-match';\n\n\n// Functions\n// =============================================================================\n/**\n * Parses CSS string and generates AST object\n *\n * @param {string}  css The CSS stringt to be converted to an AST\n * @param {object}  [options] Options object\n * @param {boolean} [options.onlyVars=false] Remove declarations that do not\n *                  contain a CSS variable from the return value. Note that\n *                  @font-face and @keyframe rules require all declarations to\n *                  be returned if a CSS variable is used.\n * @param {boolean} [options.removeComments=false] Remove comments from returned\n *                  object.\n * @returns {object}\n */\nfunction cssParse(css, options = {}) {\n    const defaults = {\n        onlyVars      : false,\n        removeComments: false\n    };\n    const settings = Object.assign({}, defaults, options);\n    const errors   = [];\n\n    // Errors\n    // -------------------------------------------------------------------------\n    function error(msg) {\n        throw new Error(`CSS parse error: ${msg}`);\n    }\n\n    // RegEx\n    // -------------------------------------------------------------------------\n    // Match regexp and return captures\n    function match(re) {\n        const m = re.exec(css);\n\n        if (m) {\n            css = css.slice(m[0].length);\n\n            return m;\n        }\n    }\n\n    function open() {\n        return match(/^{\\s*/);\n    }\n\n    function close() {\n        return match(/^}/);\n    }\n\n    function whitespace() {\n        match(/^\\s*/);\n    }\n\n    // Comments\n    // -------------------------------------------------------------------------\n    function comment() {\n        whitespace();\n\n        if (css[0] !== '/' || css[1] !== '*') {\n            return;\n        }\n\n        let i = 2;\n\n        while (css[i] && (css[i] !== '*' || css[i + 1] !== '/')) {\n            i++;\n        }\n\n        if (!css[i]) {\n            return error('end of comment is missing');\n        }\n\n        const str = css.slice(2, i);\n\n        css = css.slice(i + 2);\n\n        return {\n            type   : 'comment',\n            comment: str\n        };\n    }\n\n    function comments() {\n        const cmnts = [];\n        let c;\n\n        while ((c = comment())) {\n            cmnts.push(c);\n        }\n\n        return settings.removeComments ? [] : cmnts;\n    }\n\n    // Selector\n    // -------------------------------------------------------------------------\n    function selector() {\n        whitespace();\n\n        while (css[0] === '}') {\n            error('extra closing bracket');\n        }\n\n        const m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\n\n        if (m) {\n            return m[0]\n                .trim() // remove all comments from selectors\n                .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n                .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function(m) {\n                    return m.replace(/,/g, '\\u200C');\n                })\n                .split(/\\s*(?![^(]*\\)),\\s*/)\n                .map(function(s) {\n                    return s.replace(/\\u200C/g, ',');\n                });\n        }\n    }\n\n    // Declarations\n    // -------------------------------------------------------------------------\n    function declaration() {\n        match(/^([;\\s]*)+/); // ignore empty declarations + whitespace\n\n        const comment_regexp = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n        let prop = match(/^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n\n        if (!prop) {\n            return;\n        }\n\n        prop = prop[0].trim();\n\n        if (!match(/^:\\s*/)) {\n            return error('property missing \\':\\'');\n        }\n\n        // Quotes regex repeats verbatim inside and outside parentheses\n        const val = match(/^((?:\\/\\*.*?\\*\\/|'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\((\\s*'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|[^)]*?)\\s*\\)|[^};])+)/);\n        const ret = {\n            type    : 'declaration',\n            property: prop.replace(comment_regexp, ''),\n            value   : val ? val[0].replace(comment_regexp, '').trim() : ''\n        };\n\n        match(/^[;\\s]*/);\n\n        return ret;\n    }\n\n    function declarations() {\n        if (!open()) {\n            return error('missing \\'{\\'');\n        }\n\n        let d;\n        let decls = comments();\n\n        while ((d = declaration())) {\n            decls.push(d);\n            decls = decls.concat(comments());\n        }\n\n        if (!close()) {\n            return error('missing \\'}\\'');\n        }\n\n        return decls;\n    }\n\n    // Keyframes\n    // -------------------------------------------------------------------------\n    function keyframe() {\n        whitespace();\n\n        const vals = [];\n        let m;\n\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n\n        if (vals.length) {\n            return {\n                type        : 'keyframe',\n                values      : vals,\n                declarations: declarations()\n            };\n        }\n    }\n\n    function at_keyframes() {\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n\n        if (!m) {\n            return;\n        }\n\n        const vendor = m[1];\n\n        m = match(/^([-\\w]+)\\s*/);\n\n        if (!m) {\n            return error('@keyframes missing name');\n        }\n\n        const name = m[1];\n\n        if (!open()) {\n            return error('@keyframes missing \\'{\\'');\n        }\n\n        let frame;\n        let frames = comments();\n\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n\n        if (!close()) {\n            return error('@keyframes missing \\'}\\'');\n        }\n\n        return {\n            type     : 'keyframes',\n            name     : name,\n            vendor   : vendor,\n            keyframes: frames\n        };\n    }\n\n    // @ Rules\n    // -------------------------------------------------------------------------\n    function at_page() {\n        const m = match(/^@page */);\n        if (m) {\n            const sel = selector() || [];\n            return { type: 'page', selectors: sel, declarations: declarations() };\n        }\n    }\n    function at_fontface() {\n        const m = match(/^@font-face\\s*/);\n        if (m) { return { type: 'font-face', declarations: declarations() }; }\n    }\n    function at_supports() {\n        const m = match(/^@supports *([^{]+)/);\n        if (m) { return { type: 'supports', supports: m[1].trim(), rules: rules() }; }\n    }\n    function at_host() {\n        const m = match(/^@host\\s*/);\n        if (m) { return { type: 'host', rules: rules() }; }\n    }\n    function at_media() {\n        const m = match(/^@media *([^{]+)/);\n        if (m) { return { type: 'media', media: m[1].trim(), rules: rules() }; }\n    }\n    function at_custom_m() {\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (m) { return { type: 'custom-media', name: m[1].trim(), media: m[2].trim() }; }\n    }\n    function at_document() {\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        if (m) { return { type: 'document', document: m[2].trim(), vendor: m[1] ? m[1].trim() : null, rules: rules() }; }\n    }\n    function at_x() {\n        const m = match(/^@(import|charset|namespace)\\s*([^;]+);/);\n        if (m) { return { type: m[1], name: m[2].trim() }; }\n    }\n    function at_rule() {\n        whitespace();\n\n        if (css[0] === '@') {\n            const ret = at_keyframes() || at_supports() || at_host() || at_media() || at_custom_m() || at_page() || at_document() || at_fontface() || at_x();\n\n            if (ret && settings.onlyVars) {\n                let hasVarFunc = false;\n\n                // @page, @font-face\n                if (ret.declarations) {\n                    hasVarFunc = ret.declarations.some(decl => /var\\(/.test(decl.value));\n                }\n                // @keyframes, @media, @supports, etc.\n                else {\n                    const arr = ret.keyframes || ret.rules || [];\n\n                    hasVarFunc = arr.some(obj => (obj.declarations || []).some(decl => /var\\(/.test(decl.value)));\n                }\n\n                return hasVarFunc ? ret : {};\n            }\n\n            return ret;\n        }\n    }\n\n    // Rules\n    // -------------------------------------------------------------------------\n    function rule() {\n        if (settings.onlyVars) {\n            const balancedMatch = balanced('{', '}', css);\n\n            // When onlyVars:true, skip rulset if it does not contain a :root\n            // variable declaration of a variable function value\n            if (balancedMatch) {\n                const hasVarDecl = balancedMatch.pre.indexOf(':root') !== -1 && /--\\S*\\s*:/.test(balancedMatch.body);\n                const hasVarFunc = /var\\(/.test(balancedMatch.body);\n\n                if (!hasVarDecl && !hasVarFunc) {\n                    css = css.slice(balancedMatch.end + 1);\n\n                    return {};\n                }\n            }\n        }\n\n        const sel   = selector() || [];\n        const decls = !settings.onlyVars ? declarations() : declarations().filter(decl => {\n            const hasVarDecl = sel.some(s => s.indexOf(':root') !== -1) && /^--\\S/.test(decl.property);\n            const hasVarFunc = /var\\(/.test(decl.value);\n\n            return hasVarDecl || hasVarFunc;\n        });\n\n        if (!sel.length) {\n            error('selector missing');\n        }\n\n        return {\n            type        : 'rule',\n            selectors   : sel,\n            declarations: decls\n        };\n    }\n\n    function rules(core) {\n        if (!core && !open()) {\n            return error('missing \\'{\\'');\n        }\n\n        let node;\n        let rules = comments();\n\n        while (css.length && (core || css[0] !== '}') && (node = at_rule() || rule())) {\n            if (node.type) {\n                rules.push(node);\n            }\n\n            rules = rules.concat(comments());\n        }\n\n        if (!core && !close()) {\n            return error('missing \\'}\\'');\n        }\n\n        return rules;\n    }\n\n    return {\n        type: 'stylesheet',\n        stylesheet: {\n            rules: rules(true),\n            errors: errors\n        }\n    };\n}\n\n\n// Exports\n// =============================================================================\nexport default cssParse;\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Compiles CSS AST to string\n *\n * @param {object}   tree CSS AST object\n * @param {string}   [delim=''] CSS rule delimiter\n * @param {function} cb Function to be called before each node is processed\n * @returns {string}\n */\nfunction stringifyCss(tree, delim = '', cb) {\n    const renderMethods = {\n        charset(node) {\n            return '@charset ' + node.name + ';';\n        },\n        comment(node) {\n            // Preserve ponyfill marker comments\n            return node.comment.indexOf('__CSSVARSPONYFILL') === 0 ? '/*' + node.comment + '*/' : '';\n        },\n        'custom-media'(node) {\n            return '@custom-media ' + node.name + ' ' + node.media + ';';\n        },\n        declaration(node) {\n            return node.property + ':' + node.value + ';';\n        },\n        document(node) {\n            return '@' + (node.vendor || '') + 'document ' + node.document + '{' + visit(node.rules) + '}';\n        },\n        'font-face'(node) {\n            return '@font-face' + '{' + visit(node.declarations) + '}';\n        },\n        host(node) {\n            return '@host' + '{' + visit(node.rules) + '}';\n        },\n        import(node) {\n            // FIXED\n            return '@import ' + node.name + ';';\n        },\n        keyframe(node) {\n            return node.values.join(',') + '{' + visit(node.declarations) + '}';\n        },\n        keyframes(node) {\n            return '@' + (node.vendor || '') + 'keyframes ' + node.name + '{' + visit(node.keyframes) + '}';\n        },\n        media(node) {\n            return '@media ' + node.media + '{' + visit(node.rules) + '}';\n        },\n        namespace(node) {\n            return '@namespace ' + node.name + ';';\n        },\n        page(node) {\n            return '@page ' + (node.selectors.length ? node.selectors.join(', ') : '') + '{' + visit(node.declarations) + '}';\n        },\n        rule(node) {\n            const decls = node.declarations;\n\n            if (decls.length) {\n                return node.selectors.join(',') + '{' + visit(decls) + '}';\n            }\n        },\n        supports(node) {\n            // FIXED\n            return '@supports ' + node.supports + '{' + visit(node.rules) + '}';\n        }\n    };\n\n    function visit(nodes) {\n        let buf = '';\n\n        for (let i = 0; i < nodes.length; i++) {\n            const n = nodes[i];\n\n            if (cb) {\n                cb(n);\n            }\n\n            const txt = renderMethods[n.type](n);\n\n            if (txt) {\n                buf += txt;\n\n                if (txt.length && n.selectors) {\n                    buf += delim;\n                }\n            }\n        }\n\n        return buf;\n    }\n\n    return visit(tree.stylesheet.rules);\n}\n\n\n// Exports\n// =============================================================================\nexport default stringifyCss;\n","/**\n * Based on rework-visit by reworkcss\n * https://github.com/reworkcss/rework-visit\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Visit `node` declarations recursively and invoke `fn(declarations, node)`.\n *\n * @param {object} node\n * @param {function} fn\n */\nfunction walkCss(node, fn){\n    node.rules.forEach(function(rule){\n        // @media etc\n        if (rule.rules) {\n            walkCss(rule, fn);\n\n            return;\n        }\n\n        // keyframes\n        if (rule.keyframes) {\n            rule.keyframes.forEach(function(keyframe){\n                if (keyframe.type === 'keyframe') {\n                    fn(keyframe.declarations, rule);\n                }\n            });\n\n            return;\n        }\n\n        // @charset, @import etc\n        if (!rule.declarations) {\n            return;\n        }\n\n        fn(rule.declarations, node);\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default walkCss;\n","/**\n * Based on rework-vars by reworkcss\n * https://github.com/reworkcss/rework-vars\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced     from 'balanced-match';\nimport parseCss     from './parse-css';\nimport stringifyCss from './stringify-css';\nimport walkCss      from './walk-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst VAR_PROP_IDENTIFIER = '--';\nconst VAR_FUNC_IDENTIFIER = 'var';\nconst variableStore       = {\n    // Persisted custom property values (matches modern browsers)\n    dom : {},\n    // Non-persisted custom properties values\n    temp: {},\n    // Persisted custom property values passed using options.variables\n    user: {}\n};\n\n\n// Functions\n// =============================================================================\n/**\n * Transforms W3C-style CSS variables to static values and returns an updated\n * CSS string.\n *\n * @param {object}   cssText CSS containing variable definitions and functions\n * @param {object}   [options] Options object\n * @param {boolean}  [options.fixNestedCalc=true] Removes nested 'calc' keywords\n *                   for legacy browser compatibility.\n * @param {boolean}  [options.onlyVars=false] Remove declarations that do not\n *                   contain a CSS variable from the return value. Note that\n *                   @font-face and @keyframe rules require all declarations to\n *                   be returned if a CSS variable is used.\n * @param {boolean}  [options.persist=false] Persists options.variables,\n *                   allowing variables set in previous calls to be applied in\n *                   subsequent calls.\n * @param {boolean}  [options.preserve=false] Preserve CSS variable definitions\n *                   and functions in the return value, allowing \"live\" variable\n *                   updates via JavaScript to continue working in browsers with\n *                   native CSS variable support.\n * @param {object}   [options.variables={}] CSS variable definitions to include\n *                   during transformation. Can be used to add new override\n *                   exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *                   warning. Passes 1) warningMessage as an argument.\n * @returns {string}\n */\nfunction transformVars(cssText, options = {}) {\n    const defaults = {\n        fixNestedCalc: true,\n        onlyVars     : false,\n        persist      : false,\n        preserve     : false,\n        variables    : {},\n        onWarning() {}\n    };\n    const settings = Object.assign({}, defaults, options);\n    const map      = settings.persist ? variableStore.dom : variableStore.temp = JSON.parse(JSON.stringify(variableStore.dom));\n\n    // Convert cssText to AST (this could throw errors)\n    const cssTree = parseCss(cssText, {\n        onlyVars: settings.onlyVars\n    });\n\n    // Define variables\n    cssTree.stylesheet.rules.forEach(function(rule) {\n        const varNameIndices = [];\n\n        if (rule.type !== 'rule') {\n            return;\n        }\n\n        // only variables declared for `:root` are supported\n        if (rule.selectors.length !== 1 || rule.selectors[0] !== ':root') {\n            return;\n        }\n\n        rule.declarations.forEach(function(decl, i) {\n            const prop = decl.property;\n            const value = decl.value;\n\n            if (prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {\n                map[prop] = value;\n                varNameIndices.push(i);\n            }\n        });\n\n        // optionally remove `--*` properties from the rule\n        if (!settings.preserve) {\n            for (let i = varNameIndices.length - 1; i >= 0; i--) {\n                rule.declarations.splice(varNameIndices[i], 1);\n            }\n        }\n    });\n\n    // Restore persisted user values\n    Object.keys(variableStore.user).forEach(key => {\n        map[key] = variableStore.user[key];\n    });\n\n    // Handle variables defined in settings.variables\n    if (Object.keys(settings.variables).length) {\n        const newRule = {\n            declarations: [],\n            selectors   : [':root'],\n            type        : 'rule'\n        };\n\n        Object.keys(settings.variables).forEach(key => {\n            // Convert all property names to leading '--' style\n            const prop  = `--${key.replace(/^-+/, '')}`;\n            const value = settings.variables[key];\n\n            // Persist settings.variables values\n            if (settings.persist) {\n                variableStore.user[prop] = value;\n            }\n\n            // Update map value with settings.variables value\n            if (map[prop] !== value) {\n                map[prop] = value;\n\n                // Add new declaration to newRule\n                newRule.declarations.push({\n                    type    : 'declaration',\n                    property: prop,\n                    value   : value\n                });\n            }\n        });\n\n        // Append new :root ruleset\n        if (settings.preserve && newRule.declarations.length) {\n            cssTree.stylesheet.rules.push(newRule);\n        }\n    }\n\n    // Resolve variables\n    walkCss(cssTree.stylesheet, function(declarations, node) {\n        let decl;\n        let resolvedValue;\n        let value;\n\n        for (let i = 0; i < declarations.length; i++) {\n            decl = declarations[i];\n            value = decl.value;\n\n            // skip comments\n            if (decl.type !== 'declaration') {\n                continue;\n            }\n\n            // skip values that don't contain variable functions\n            if (!value || value.indexOf(VAR_FUNC_IDENTIFIER + '(') === -1) {\n                continue;\n            }\n\n            resolvedValue = resolveValue(value, map, settings);\n\n            if (resolvedValue !== decl.value) {\n                if (!settings.preserve) {\n                    decl.value = resolvedValue;\n                }\n                else {\n                    declarations.splice(i, 0, {\n                        type    : decl.type,\n                        property: decl.property,\n                        value   : resolvedValue\n                    });\n\n                    // skip ahead of preserved declaration\n                    i++;\n                }\n            }\n        }\n    });\n\n    // Fix nested calc() values\n    if (settings.fixNestedCalc) {\n        fixNestedCalc(cssTree.stylesheet.rules);\n    }\n\n    // Return CSS string\n    return stringifyCss(cssTree);\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Removes nested calc keywords for legacy browser compatibility.\n * Example: calc(1 + calc(2 + calc(3 + 3))) => calc(1 + (2 + (3 + 3)))\n *\n * @param {array} rules\n */\nfunction fixNestedCalc(rules) {\n    const reCalcExp = /(-[a-z]+-)?calc\\(/; // Match \"calc(\" or \"-vendor-calc(\"\n\n    rules.forEach(rule => {\n        if (rule.declarations) {\n            rule.declarations.forEach(decl => {\n                let oldValue = decl.value;\n                let newValue = '';\n\n                while (reCalcExp.test(oldValue)) {\n                    const rootCalc = balanced('calc(', ')', oldValue || '');\n\n                    oldValue = oldValue.slice(rootCalc.end);\n\n                    while (reCalcExp.test(rootCalc.body)) {\n                        const nestedCalc = balanced(reCalcExp, ')', rootCalc.body);\n\n                        rootCalc.body = `${nestedCalc.pre}(${nestedCalc.body})${nestedCalc.post}`;\n                    }\n\n                    newValue += `${rootCalc.pre}calc(${rootCalc.body}`;\n                    newValue += !reCalcExp.test(oldValue) ? `)${rootCalc.post}` : '';\n                }\n\n                decl.value = newValue || decl.value;\n            });\n        }\n    });\n}\n\n/**\n * Resolves CSS var() function(s) with `map` data or fallback value(s). Returns\n * original `value` if unable to resolve.\n *\n * @param {string} value String containing CSS var() functions to resolve\n * @param {object} map CSS custom property key/values\n * @param {object} settings Settings object passed from transformVars()\n * @param {string} [__recursiveFallback] Fallback when unable to resolve CSS\n *                 var() function to a map or fallback value. Allows restoring\n *                 original var() function from recursive resolveValue() calls.\n * @return {string} CSS value with var() function(s) resolved to map or fallback\n *                  value.\n *\n * @example\n *\n *   resolveValue('10px var(--x) 30px', {'--x':'20px'}, {...settings});\n *   // => '10px 20px 30px'\n *\n *   resolveValue('10px', {}, {...settings});\n *   // => '10px'\n */\nfunction resolveValue(value, map, settings = {}, __recursiveFallback) {\n    if (value.indexOf('var(') === -1) {\n        return value;\n    }\n\n    const valueData    = balanced('(', ')', value);\n    const warningIntro = 'CSS transform warning:';\n\n    /**\n     * Resolves contents of CSS custom property function\n     *\n     * @param {string} value String containing contents of CSS var() function\n     * @returns {string}\n     *\n     * @example\n     *\n     *   resolveFunc('--x, var(--y, green)')\n     *   // => map['--x'] or map['--y'] or 'green'\n     *\n     *   resolveFunc('--fail')\n     *   // => 'var(--fail)' when map['--fail'] does not exist\n     */\n    function resolveFunc(value) {\n        const name               = value.split(',')[0].replace(/[\\s\\n\\t]/g, '');\n        const fallback           = (value.match(/(?:\\s*,\\s*){1}(.*)?/) || [])[1];\n        const match              = map.hasOwnProperty(name) ? String(map[name]) : undefined;\n        const replacement        = match || (fallback ? String(fallback) : undefined);\n        const unresolvedFallback = __recursiveFallback || value;\n\n        if (!match) {\n            settings.onWarning(`${warningIntro} variable \"${name}\" is undefined`);\n        }\n\n        if (replacement && replacement !== 'undefined' && replacement.length > 0) {\n            return resolveValue(replacement, map, settings, unresolvedFallback);\n        }\n        else {\n            return `var(${unresolvedFallback})`;\n        }\n    }\n\n    // No balanced brace data\n    if (!valueData) {\n        if (value.indexOf('var(') !== -1) {\n            settings.onWarning(`${warningIntro} missing closing \")\" in the value \"${value}\"`);\n        }\n\n        return value;\n    }\n    // Balanced brace data is var() function\n    else if (valueData.pre.slice(-3) === 'var') {\n        const isEmptyVarFunc = valueData.body.trim().length === 0;\n\n        if (isEmptyVarFunc) {\n            settings.onWarning(`${warningIntro} var() must contain a non-whitespace string`);\n\n            return value;\n        }\n        else {\n            return (\n                valueData.pre.slice(0,-3)\n                + resolveFunc(valueData.body)\n                + resolveValue(valueData.post, map, settings)\n            );\n        }\n    }\n    // Balanced brace data is NOT var() function\n    else {\n        return (\n            valueData.pre\n            + `(${resolveValue(valueData.body, map, settings)})`\n            + resolveValue(valueData.post, map, settings)\n        );\n    }\n}\n\n\n// Exports\n// =============================================================================\nexport default transformVars;\nexport { variableStore };","// Dependencies\n// =============================================================================\nimport getCssData          from 'get-css-data';\nimport transformCss        from './transform-css';\nimport { variableStore }   from './transform-css';\nimport { name as pkgName } from '../package.json';\n\n\n// Constants & Variables\n// =============================================================================\nconst isBrowser       = typeof window !== 'undefined';\nconst isNativeSupport = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports('(--a: 0)');\n\nconst defaults = {\n    // Sources\n    rootElement  : isBrowser ? document : null,\n    include      : 'style,link[rel=stylesheet]',\n    exclude      : '',\n    // Options\n    fixNestedCalc: true,  // transformCss\n    onlyLegacy   : true,  // cssVars\n    onlyVars     : false, // cssVars, parseCSS\n    preserve     : false, // transformCss\n    shadowDOM    : false, // cssVars\n    silent       : false, // cssVars\n    updateDOM    : true,  // cssVars\n    updateURLs   : true,  // cssVars\n    variables    : {},    // transformCss\n    watch        : null,  // cssVars\n    // Callbacks\n    onBeforeSend() {},    // cssVars\n    onSuccess() {},       // cssVars\n    onWarning() {},       // transformCss\n    onError() {},         // cssVars\n    onComplete() {}       // cssVars\n};\nconst regex = {\n    // CSS comments\n    cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n    // CSS keyframes (@keyframes & @-VENDOR-keyframes)\n    cssKeyframes: /@(?:-\\w*-)?keyframes/,\n    // CSS root vars\n    cssRootRules: /(?::root\\s*{\\s*[^}]*})/g,\n    // CSS url(...) values\n    cssUrls: /url\\((?!['\"]?(?:data|http|\\/\\/):)['\"]?([^'\")]*)['\"]?\\)/g,\n    // CSS variable :root declarations and var() function values\n    cssVars: /(?:(?::root\\s*{\\s*[^;]*;*\\s*)|(?:var\\(\\s*))(--[^:)]+)(?:\\s*[:)])/\n};\n\n// Mutation observer referece created via options.watch\nlet cssVarsObserver  = null;\n\n// Indicates if document-level custom property values have been parsed, stored,\n// and ready for use with options.shadowDOM\nlet isShadowDOMReady = false;\n\n\n// Functions\n// =============================================================================\n/**\n * Fetches, parses, and transforms CSS custom properties from specified\n * <style> and <link> elements into static values, then appends a new <style>\n * element with static values to the DOM to provide CSS custom property\n * compatibility for legacy browsers. Also provides a single interface for\n * live updates of runtime values in both modern and legacy browsers.\n *\n * @preserve\n * @param {object}   [options] Options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include=\"style,link[rel=stylesheet]\"] CSS selector\n *                   matching <link re=\"stylesheet\"> and <style> nodes to\n *                   process\n * @param {string}   [options.exclude] CSS selector matching <link\n *                   rel=\"stylehseet\"> and <style> nodes to exclude from those\n *                   matches by options.include\n * @param {boolean}  [options.fixNestedCalc=true] Removes nested 'calc' keywords\n *                   for legacy browser compatibility.\n * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will\n *                   only generate legacy-compatible CSS in browsers that lack\n *                   native support (i.e., legacy browsers)\n * @param {boolean}  [options.onlyVars=false] Determines if CSS rulesets and\n *                   declarations without a custom property value should be\n *                   removed from the ponyfill-generated CSS\n * @param {boolean}  [options.preserve=false] Determines if the original CSS\n *                   custom property declaration will be retained in the\n *                   ponyfill-generated CSS.\n * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>\n *                   and <style> nodes will be processed.\n * @param {boolean}  [options.silent=false] Determines if warning and error\n *                   messages will be displayed on the console\n * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will\n *                   update the DOM after processing CSS custom properties\n * @param {boolean}  [options.updateURLs=true] Determines if the ponyfill will\n *                   convert relative url() paths to absolute urls.\n * @param {object}   [options.variables] A map of custom property name/value\n *                   pairs. Property names can omit or include the leading\n *                   double-hyphen (—), and values specified will override\n *                   previous values.\n * @param {boolean}  [options.watch=false] Determines if a MutationObserver will\n *                   be created that will execute the ponyfill when a <link> or\n *                   <style> DOM mutation is observed.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback after CSS data has been\n *                   collected from each node and before CSS custom properties\n *                   have been transformed. Allows modifying the CSS data before\n *                   it is transformed by returning any string value (or false\n *                   to skip). Passes 1) CSS text, 2) source node reference, and\n *                   3) the source URL as arguments.\n * @param {function} [options.onWarning] Callback after each CSS parsing warning\n *                   has occurred. Passes 1) a warning message as an argument.\n * @param {function} [options.onError] Callback after a CSS parsing error has\n *                   occurred or an XHR request has failed. Passes 1) an error\n *                   message, and 2) source node reference, 3) xhr, and 4 url as\n *                   arguments.\n * @param {function} [options.onComplete] Callback after all CSS has been\n *                   processed, legacy-compatible CSS has been generated, and\n *                   (optionally) the DOM has been updated. Passes 1) a CSS\n *                   string with CSS variable values resolved, 2) a reference to\n *                   the appended <style> node, and 3) an object containing all\n *                   custom properies names and values.\n *\n * @example\n *\n *   cssVars({\n *     rootElement  : document,\n *     include      : 'style,link[rel=\"stylesheet\"]',\n *     exclude      : '',\n *     fixNestedCalc: true,\n *     onlyLegacy   : true,\n *     onlyVars     : false,\n *     preserve     : false,\n *     shadowDOM    : false,\n *     silent       : false,\n *     updateDOM    : true,\n *     updateURLs   : true,\n *     variables    : {\n *       // ...\n *     },\n *     watch        : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     },\n *     onWarning(message) {\n *       // ...\n *     },\n *     onError(message, node) {\n *       // ...\n *     },\n *     onComplete(cssText, styleNode) {\n *       // ...\n *     }\n *   });\n */\nfunction cssVars(options = {}) {\n    const settings    = Object.assign({}, defaults, options);\n    const styleNodeId = pkgName;\n\n    // Always exclude styleNodeId element, which is the generated <style> node\n    // containing previously transformed CSS.\n    settings.exclude = `#${styleNodeId}` + (settings.exclude ? `,${settings.exclude}` : '');\n\n    function handleError(message, sourceNode, xhr, url) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.error(`${message}\\n`, sourceNode);\n        }\n\n        settings.onError(message, sourceNode, xhr, url);\n    }\n\n    function handleWarning(message) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.warn(message);\n        }\n\n        settings.onWarning(message);\n    }\n\n    // Exit if non-browser environment (e.g. Node)\n    if (!isBrowser) {\n        return;\n    }\n\n    // Verify readyState to ensure all <link> and <style> nodes are available\n    if (document.readyState !== 'loading') {\n        const isShadowElm = settings.shadowDOM || settings.rootElement.shadowRoot || settings.rootElement.host;\n\n        // Native support\n        if (isNativeSupport && settings.onlyLegacy) {\n            // Apply settings.variables\n            if (settings.updateDOM) {\n                const targetElm = settings.rootElement.host || (settings.rootElement === document ? document.documentElement : settings.rootElement);\n\n                // Set variables using native methods\n                Object.keys(settings.variables).forEach(key => {\n                    // Convert all property names to leading '--' style\n                    const prop  = `--${key.replace(/^-+/, '')}`;\n                    const value = settings.variables[key];\n\n                    targetElm.style.setProperty(prop, value);\n                });\n            }\n        }\n        // Ponyfill: Handle rootElement set to a shadow host or root\n        else if (isShadowElm && !isShadowDOMReady) {\n            // Get all document-level CSS\n            getCssData({\n                rootElement: defaults.rootElement,\n                include: defaults.include,\n                exclude: settings.exclude,\n                onSuccess(cssText, node, url) {\n                    const cssRootDecls = (cssText.match(regex.cssRootRules) || []).join('');\n\n                    // Return only matching :root {...} blocks\n                    return cssRootDecls || false;\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    // Transform CSS, which stores custom property values from\n                    // cssText in variableStore. This step ensures that\n                    // variableStore contains all document-level custom property\n                    // values for subsequent ponyfill calls.\n                    transformCss(cssText, {\n                        persist: true\n                    });\n\n                    isShadowDOMReady = true;\n\n                    // Call the ponyfill again to process the rootElement\n                    // initially specified. Values stored in variableStore will\n                    // be used to transform values in shadow host/root elements.\n                    cssVars(settings);\n                }\n            });\n        }\n        // Ponyfill: Process CSS\n        else {\n            // Add / recreate MutationObserver\n            if (settings.watch) {\n                addMutationObserver(settings, styleNodeId);\n            }\n            // Disconnect existing\n            else if (settings.watch === false && cssVarsObserver) {\n                cssVarsObserver.disconnect();\n            }\n\n            getCssData({\n                rootElement: settings.rootElement,\n                include: settings.include,\n                exclude: settings.exclude,\n                // This filter does a test on each block of CSS. An additional\n                // filter is used in the parser to remove individual\n                // declarations.\n                filter: settings.onlyVars ? regex.cssVars : null,\n                onBeforeSend: settings.onBeforeSend,\n                onSuccess(cssText, node, url) {\n                    const returnVal = settings.onSuccess(cssText, node, url);\n\n                    cssText = returnVal !== undefined && Boolean(returnVal) === false ? '' : returnVal || cssText;\n\n                    // Convert relative url(...) values to absolute\n                    if (settings.updateURLs) {\n                        const cssUrls = cssText\n                        // Remove comments to avoid processing @import in comments\n                            .replace(regex.cssComments, '')\n                            // Match url(...) values\n                            .match(regex.cssUrls) || [];\n\n                        cssUrls.forEach(cssUrl => {\n                            const oldUrl = cssUrl.replace(regex.cssUrls, '$1');\n                            const newUrl = getFullUrl(oldUrl, url);\n\n                            cssText = cssText.replace(cssUrl, cssUrl.replace(oldUrl, newUrl));\n                        });\n                    }\n\n                    return cssText;\n                },\n                onError(xhr, node, url) {\n                    const responseUrl = xhr.responseURL || getFullUrl(url, location.href);\n                    const statusText  = xhr.statusText ? `(${xhr.statusText})` : 'Unspecified Error' + (xhr.status === 0 ? ' (possibly CORS related)' : '');\n                    const errorMsg    = `CSS XHR Error: ${responseUrl} ${xhr.status} ${statusText}`;\n\n                    handleError(errorMsg, node, xhr, responseUrl);\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    const cssMarker = /\\/\\*__CSSVARSPONYFILL-(\\d+)__\\*\\//g;\n                    let   styleNode = null;\n\n                    // Concatenate cssArray items, replacing those that do not\n                    // contain a CSS custom property declaraion or function with\n                    // a temporary marker . After the CSS is transformed, the\n                    // markers will be replaced with the matching cssArray item.\n                    // This optimization is done to avoid processing CSS that\n                    // will not change as a results of the ponyfill.\n                    cssText = cssArray.map((css, i) => regex.cssVars.test(css) ? css : `/*__CSSVARSPONYFILL-${i}__*/`).join('');\n\n                    try {\n                        cssText = transformCss(cssText, {\n                            fixNestedCalc: settings.fixNestedCalc,\n                            onlyVars     : settings.onlyVars,\n                            persist      : settings.updateDOM,\n                            preserve     : settings.preserve,\n                            variables    : settings.variables,\n                            onWarning    : handleWarning\n                        });\n\n                        const hasKeyframes = regex.cssKeyframes.test(cssText);\n\n                        // Replace markers with appropriate cssArray item\n                        cssText = cssText.replace(cssMarker, (match, group1) => cssArray[group1]);\n\n                        if (settings.updateDOM && nodeArray && nodeArray.length) {\n                            const lastNode = nodeArray[nodeArray.length - 1];\n\n                            styleNode = settings.rootElement.querySelector(`#${styleNodeId}`) || document.createElement('style');\n                            styleNode.setAttribute('id', styleNodeId);\n\n                            if (styleNode.textContent !== cssText) {\n                                styleNode.textContent = cssText;\n                            }\n\n                            // Insert <style> element after last nodeArray item\n                            if (lastNode.nextSibling !== styleNode && lastNode.parentNode) {\n                                lastNode.parentNode.insertBefore(styleNode, lastNode.nextSibling);\n                            }\n\n                            if (hasKeyframes) {\n                                fixKeyframes(settings.rootElement);\n                            }\n                        }\n                    }\n                    catch(err) {\n                        let errorThrown = false;\n\n                        // Iterate cssArray to detect CSS text and node(s)\n                        // responsibile for error.\n                        cssArray.forEach((cssText, i) => {\n                            try {\n                                cssText = transformCss(cssText, settings);\n                            }\n                            catch(err) {\n                                const errorNode = nodeArray[i - 0];\n\n                                errorThrown = true;\n                                handleError(err.message, errorNode);\n                            }\n                        });\n\n                        // In the event the error thrown was not due to\n                        // transformCss, handle the original error.\n                        /* istanbul ignore next */\n                        if (!errorThrown) {\n                            handleError(err.message || err);\n                        }\n                    }\n\n                    // Process shadow DOM\n                    if (settings.shadowDOM) {\n                        const elms = [\n                            settings.rootElement,\n                            ...settings.rootElement.querySelectorAll('*')\n                        ];\n\n                        // Iterates over all elements in rootElement and calls\n                        // cssVars on each shadowRoot, passing document-level\n                        // custom properties as options.variables.\n                        for (let i = 0, elm; (elm = elms[i]); ++i) {\n                            if (elm.shadowRoot && elm.shadowRoot.querySelector('style')) {\n                                const shadowSettings = Object.assign({}, settings, {\n                                    rootElement: elm.shadowRoot,\n                                    variables  : variableStore.dom\n                                });\n\n                                cssVars(shadowSettings);\n                            }\n                        }\n                    }\n\n                    settings.onComplete(cssText, styleNode, JSON.parse(JSON.stringify(settings.updateDOM ? variableStore.dom : variableStore.temp)));\n                }\n            });\n        }\n\n    }\n    // Delay function until DOMContentLoaded event is fired\n    /* istanbul ignore next */\n    else {\n        document.addEventListener('DOMContentLoaded', function init(evt) {\n            cssVars(options);\n\n            document.removeEventListener('DOMContentLoaded', init);\n        });\n    }\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates mutation observer that executes the ponyfill when a <link> or <style>\n * DOM mutation is observed.\n *\n * @param {object} settings\n * @param {string} ignoreId\n */\nfunction addMutationObserver(settings, ignoreId) {\n    if (!window.MutationObserver) {\n        return;\n    }\n\n    const isLink  = node => node.tagName === 'LINK' && (node.getAttribute('rel') || '').indexOf('stylesheet') !== -1;\n    const isStyle = node => node.tagName === 'STYLE' && (ignoreId ? node.id !== ignoreId : true);\n\n    if (cssVarsObserver) {\n        cssVarsObserver.disconnect();\n    }\n\n    settings.watch = defaults.watch;\n\n    cssVarsObserver = new MutationObserver(function(mutations) {\n        let isUpdateMutation = false;\n\n        for (let i = 0; i < mutations.length; i++) {\n            const mutation = mutations[i];\n\n            if (mutation.type === 'attributes') {\n                isUpdateMutation = isLink(mutation.target) || isStyle(mutation.target);\n            }\n            else if (mutation.type === 'childList') {\n                const addedNodes   = Array.apply(null, mutation.addedNodes);\n                const removedNodes = Array.apply(null, mutation.removedNodes);\n\n                isUpdateMutation = [].concat(addedNodes, removedNodes).some(node => {\n                    const isValidLink  = isLink(node) && !node.disabled;\n                    const isValidStyle = isStyle(node) && !node.disabled && regex.cssVars.test(node.textContent);\n\n                    return (isValidLink || isValidStyle);\n                });\n            }\n\n            if (isUpdateMutation || (i+1 === mutations.length)) {\n                cssVars(settings);\n            }\n        }\n    });\n\n    cssVarsObserver.observe(document.documentElement, {\n        attributes     : true,\n        attributeFilter: ['style', 'class'],\n        childList      : true,\n        subtree        : true\n    });\n}\n\n/**\n * Fixes issue with keyframe properties set using CSS custom property not being\n * applied properly in some legacy (IE) and modern (Safari) browsers.\n *\n * @param {object} rootElement\n */\nfunction fixKeyframes(rootElement) {\n    const animationNameProp = [\n        'animation-name',\n        '-moz-animation-name',\n        '-webkit-animation-name'\n    ].filter(prop => getComputedStyle(document.body)[prop])[0];\n\n    if (animationNameProp) {\n        const allNodes      = rootElement.getElementsByTagName('*');\n        const keyframeNodes = [];\n        const nameMarker    = '__CSSVARSPONYFILL-KEYFRAMES__';\n\n        // Modify animation name\n        for (let i = 0, len = allNodes.length; i < len; i++) {\n            const node          = allNodes[i];\n            const animationName = getComputedStyle(node)[animationNameProp];\n\n            if (animationName !== 'none') {\n                node.style[animationNameProp] += nameMarker;\n                keyframeNodes.push(node);\n            }\n        }\n\n        // Force reflow\n        void document.body.offsetHeight;\n\n        // Restore animation name\n        for (let i = 0, len = keyframeNodes.length; i < len; i++) {\n            const nodeStyle = keyframeNodes[i].style;\n\n            nodeStyle[animationNameProp] = nodeStyle[animationNameProp].replace(nameMarker, '');\n        }\n    }\n}\n\n/**\n * Returns fully qualified URL from relative URL and (optional) base URL\n *\n * @param   {string} url\n * @param   {string} [base=location.href]\n * @returns {string}\n */\nfunction getFullUrl(url, base = location.href) {\n    const d = document.implementation.createHTMLDocument('');\n    const b = d.createElement('base');\n    const a = d.createElement('a');\n\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n\n    return a.href;\n}\n\n// Export\n// =============================================================================\nexport default cssVars;\n"],"names":["getUrls","urls","options","arguments","length","undefined","settings","mimeType","onBeforeSend","Function","prototype","onSuccess","onError","onComplete","urlArray","Array","isArray","urlQueue","apply","map","x","isValidCss","cssText","isHTML","trim","charAt","xhr","urlIndex","responseText","returnVal","indexOf","parser","document","createElement","forEach","url","i","setAttribute","href","String","isIElte9","Boolean","all","window","atob","isIElte9CORS","host","split","location","isSameProtocol","protocol","xdr","XDomainRequest","open","timeout","onprogress","ontimeout","onload","onerror","err","setTimeout","send","console","warn","concat","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","getCssData","regex","cssComments","cssImports","rootElement","include","exclude","filter","useCSSOM","sourceNodes","querySelectorAll","node","matchesSelector","cssArray","handleComplete","isComplete","join","handleSuccess","cssIndex","sourceUrl","resolveImports","resolvedCssText","errorData","data","test","parseImportData","baseUrl","ignoreRules","importData","rules","replace","match","rule","absoluteUrls","getFullUrl","absoluteRules","oldUrl","newUrl","callbackFn","__errorData","__errorRules","responseImportData","push","responseArray","importText","linkHref","getAttribute","linkRel","isLink","nodeName","toLowerCase","isStyle","textContent","sheet","cssRules","base","d","implementation","createHTMLDocument","b","a","head","appendChild","body","elm","selector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","balanced","str","RegExp","maybeMatch","r","range","start","end","pre","slice","post","reg","m","begs","beg","left","right","result","ai","bi","pop","cssParse","css","defaults","onlyVars","removeComments","_extends","errors","error","msg","Error","re","exec","close","whitespace","comment","type","comments","cmnts","c","s","declaration","comment_regexp","prop","val","ret","property","value","declarations","decls","keyframe","vals","values","at_keyframes","vendor","name","frame","frames","keyframes","at_page","sel","selectors","at_fontface","at_supports","supports","at_host","at_media","media","at_custom_m","at_document","at_x","at_rule","hasVarFunc","some","decl","arr","obj","balancedMatch","hasVarDecl","core","stylesheet","stringifyCss","tree","delim","cb","renderMethods","charset","visit","import","namespace","page","nodes","buf","n","txt","walkCss","fn","VAR_PROP_IDENTIFIER","VAR_FUNC_IDENTIFIER","variableStore","dom","temp","user","transformVars","fixNestedCalc","persist","preserve","variables","onWarning","JSON","parse","stringify","cssTree","parseCss","varNameIndices","splice","Object","keys","key","newRule","resolvedValue","resolveValue","reCalcExp","oldValue","newValue","rootCalc","nestedCalc","__recursiveFallback","valueData","warningIntro","resolveFunc","fallback","hasOwnProperty","replacement","unresolvedFallback","isEmptyVarFunc","isBrowser","isNativeSupport","CSS","onlyLegacy","shadowDOM","silent","updateDOM","updateURLs","watch","cssKeyframes","cssRootRules","cssUrls","cssVars","cssVarsObserver","isShadowDOMReady","styleNodeId","pkgName","handleError","message","sourceNode","handleWarning","isShadowElm","shadowRoot","targetElm","documentElement","style","setProperty","cssRootDecls","nodeArray","transformCss","addMutationObserver","disconnect","cssUrl","responseUrl","responseURL","statusText","errorMsg","cssMarker","styleNode","hasKeyframes","group1","lastNode","querySelector","nextSibling","parentNode","insertBefore","fixKeyframes","errorThrown","errorNode","elms","shadowSettings","addEventListener","init","evt","removeEventListener","ignoreId","MutationObserver","tagName","id","mutations","isUpdateMutation","mutation","target","addedNodes","removedNodes","isValidLink","disabled","isValidStyle","observe","attributes","attributeFilter","childList","subtree","animationNameProp","getComputedStyle","allNodes","getElementsByTagName","keyframeNodes","nameMarker","len","animationName","offsetHeight","nodeStyle"],"mappings":"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"}